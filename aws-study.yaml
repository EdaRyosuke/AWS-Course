AWSTemplateFormatVersion: "2010-09-09"

Description: aws-study-template

Parameters:

  Prefix:
    Type: String
    Default: aws-study
    Description: Common prefix for resource names

  SSHLocation:
    Description: IP address range that can SSH to EC2 (e.g. 203.0.113.0/32)
    Type: String
    Default: 0.0.0.0/32
    NoEcho: true

  KeyName:
    Description: The EC2 KeyPair to allow SSH access to the instance
    Type: AWS::EC2::KeyPair::KeyName

  RDSUserName:
    Type: 'String'
    Description: The username for the RDS instance

  RDSPassword:
    Type: 'String'
    NoEcho: true
    Description: The user password for the RDS instance

Resources:
  
  AwsStudyVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: !Sub "${Prefix}-VPC"

  AwsStudyInternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub "${Prefix}-internet-gateway"

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref AwsStudyVPC
      InternetGatewayId: !Ref AwsStudyInternetGateway

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref AwsStudyVPC
      Tags:
        - Key: Name
          Value: !Sub "${Prefix}-rtb-public"

  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref AwsStudyInternetGateway


  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref AwsStudyPublicSubnet1
      RouteTableId: !Ref PublicRouteTable

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref AwsStudyPublicSubnet2
      RouteTableId: !Ref PublicRouteTable


  AwsStudyEC2SG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref AwsStudyVPC
      GroupDescription: !Sub "${Prefix}-EC2-SG created 2025-04-21"
      SecurityGroupIngress:
        - IpProtocol: tcp
          ToPort: 22
          FromPort: 22
          CidrIp: !Ref SSHLocation
        - IpProtocol: tcp
          ToPort: 8080
          FromPort: 8080
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Sub "${Prefix}-ec2-sg"
  
  AwsStudyPublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref AwsStudyVPC
      AvailabilityZone: "ap-northeast-1a"
      CidrBlock: 10.0.0.0/24
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub "${Prefix}-public-subnet1"
  
  AwsStudyPublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref AwsStudyVPC
      AvailabilityZone: "ap-northeast-1c"
      CidrBlock: 10.0.3.0/24
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub "${Prefix}-public-subnet2"


  AwsStudyEC2:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: ami-05206bf8aecfc7ae6
      InstanceType: t2.micro
      KeyName: !Ref KeyName
      NetworkInterfaces:
        - AssociatePublicIpAddress: true
          DeviceIndex: 0
          SubnetId: !Ref AwsStudyPublicSubnet1
          GroupSet:
            -  !Ref AwsStudyEC2SG
      Tags:
        - Key: Name
          Value: !Sub "${Prefix}-EC2"

  AwsStudyPrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref AwsStudyVPC
      AvailabilityZone: "ap-northeast-1a"
      CidrBlock: 10.0.1.0/24
      Tags:
        - Key: Name
          Value: !Sub "${Prefix}-private-subnet1"

  AwsStudyPrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref AwsStudyVPC
      AvailabilityZone: "ap-northeast-1c"
      CidrBlock: 10.0.2.0/24
      Tags:
        - Key: Name
          Value: !Sub "${Prefix}-private-subnet2"

  DBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: Subnet group for RDS
      SubnetIds:
        - !Ref AwsStudyPrivateSubnet1
        - !Ref AwsStudyPrivateSubnet2
      Tags:
        - Key: Name
          Value: DBSubnetGroup

  AwsStudyRDS:
    Type: AWS::RDS::DBInstance
    Properties:
      AllocatedStorage: '5'
      StorageType: gp2
      DBInstanceClass: db.t3.micro
      Engine: mysql
      EngineVersion: "8.0.39"
      MasterUsername: !Ref RDSUserName
      MasterUserPassword: !Ref RDSPassword
      BackupRetentionPeriod: '1'
      DBName: awsstudy
      DBSubnetGroupName: !Ref DBSubnetGroup
      VPCSecurityGroups:
        - !Ref AwsStudyRDSSG
      PubliclyAccessible: false
      MultiAZ: false
      DeletionProtection: false
      Tags:
        - Key: Name
          Value: !Sub "${Prefix}-RDS-instance"

  AwsStudyRDSSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Allow inbound MySQL connection from EC2"
      VpcId: !Ref AwsStudyVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          ToPort: 3306
          FromPort: 3306
          SourceSecurityGroupId: !Ref AwsStudyEC2SG
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Sub "${Prefix}-RDS-SG"

  AwsStudyALBSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Allow HTTP access to ALB"
      VpcId: !Ref AwsStudyVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Sub "${Prefix}-ALB-SG"

  AwsStudyTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Port: 8080
      Protocol: HTTP
      VpcId: !Ref AwsStudyVPC
      TargetType: instance
      HealthCheckPort: "8080"
      HealthCheckPath: /
      Name: !Sub "${Prefix}-target-group"
      Targets:
        - Id: !Ref AwsStudyEC2

  AwsStudyALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Sub "${Prefix}-alb"
      Subnets:
        - !Ref AwsStudyPublicSubnet1
        - !Ref AwsStudyPublicSubnet2
      SecurityGroups:
        - !Ref AwsStudyALBSG
      Scheme: internet-facing
      Type: application
      IpAddressType: ipv4
      Tags:
        - Key: Name
          Value: !Sub "${Prefix}-alb"

  AwsStudyALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref AwsStudyALB
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref AwsStudyTargetGroup

  AwsStudySNSTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: !Sub "${Prefix}-topic"
      Subscription:
        - Protocol: email
          Endpoint: coedpft@gmail.com
      Tags:
        - Key: Name
          Value: !Sub "${Prefix}-sns-topic"

  EC2CPUUtilizationAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub "${Prefix}-cpu-utilization-alarm"
      AlarmDescription: !Sub "${Prefix}-EC2のCPU使用率が70%以上になりました"
      Namespace: "AWS/EC2"
      Dimensions:
        - Name: "InstanceId"
          Value: !Ref AwsStudyEC2
      MetricName: "CPUUtilization"
      Unit: "Percent"
      Period: 300
      Statistic: "Average"
      Threshold: 70
      ComparisonOperator: "GreaterThanOrEqualToThreshold"
      EvaluationPeriods: 3
      DatapointsToAlarm: 2
      TreatMissingData: "notBreaching"
      ActionsEnabled: true
      AlarmActions:
        - !GetAtt AwsStudySNSTopic.TopicArn

  AwsStudyWAFWebACL:
    Type: AWS::WAFv2::WebACL
    Properties:
      Name: !Sub "${Prefix}-web-acl"
      Scope: REGIONAL
      DefaultAction:
        Allow: {}
      VisibilityConfig:
        SampledRequestsEnabled: true
        CloudWatchMetricsEnabled: true
        MetricName: !Sub "${Prefix}-web-acl"
      Rules:
        - Name: AWS-AWSManagedRulesCommonRuleset
          Priority: 0
          OverrideAction:
            None: {}
          Statement:
            ManagedRuleGroupStatement:
              VendorName: AWS
              Name: AWSManagedRulesCommonRuleSet
          VisibilityConfig:
            SampledRequestsEnabled: true
            CloudWatchMetricsEnabled: true
            MetricName: AWSManagedRulesCommonRuleSet

  WebACLAssociation:
    Type: AWS::WAFv2::WebACLAssociation
    Properties:
      ResourceArn: !GetAtt AwsStudyALB.LoadBalancerArn
      WebACLArn: !GetAtt AwsStudyWAFWebACL.Arn

  AwsStudyWAFLoggingConfiguration:
    Type: AWS::WAFv2::LoggingConfiguration
    Properties:
      LogDestinationConfigs:
        - !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:aws-waf-logs-group-${Prefix}"
      ResourceArn: !GetAtt AwsStudyWAFWebACL.Arn

  AwsStudyWAFLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "aws-waf-logs-group-${Prefix}"
      RetentionInDays: 30

  AwsStudyWAFLogFilter:
    Type: AWS::Logs::MetricFilter
    Properties:
      FilterPattern: '{ $.action = "BLOCK" }'
      LogGroupName: !Ref AwsStudyWAFLogGroup
      MetricTransformations:
        - MetricName: !Sub "${Prefix}-WAFBlockedRequests"
          MetricNamespace: "MyApp/Logs"
          MetricValue: "1"

  AwsStudyWAFBlockedRequestsAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub "${Prefix}-WAF-Blocked-Requests-Alarm"
      AlarmDescription: "WAFでブロックされたリクエストが発生しました"
      Namespace: "MyApp/Logs"
      MetricName: !Sub "${Prefix}-WAFBlockedRequests"
      Statistic: "Sum"
      Period: 300
      Threshold: 1
      ComparisonOperator: "GreaterThanOrEqualToThreshold"
      EvaluationPeriods: 1
      DatapointsToAlarm: 1
      ActionsEnabled: true
      AlarmActions:
        - !GetAtt AwsStudySNSTopic.TopicArn
